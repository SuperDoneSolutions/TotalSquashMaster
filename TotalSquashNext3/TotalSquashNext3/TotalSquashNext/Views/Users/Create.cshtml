@model TotalSquashNext.Models.User

@{
    ViewBag.Title = "Register New User";
    Layout = null;
}

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Total Squash</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta name="layout" content="main" />

    <script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <script src="../../js/jquery/jquery-1.8.2.min.js" type="text/javascript"></script>
    <link href="~/Content/customize-template.css" type="text/css" media="screen, projection" rel="stylesheet" />
    <style>
    </style>
</head>

<body>
    <div class="navbar navbar-fixed-top">
        <div class="navbar-inner">
            <div class="container">
                @Html.ActionLink("Total Squash", "LandingPage", "Login", null, new { @class = "brand" })
            </div>
        </div>
    </div>
    <div id="body-container">
        
            <div class="container body-content">
                <br />
                <br />
                <br />
            <h2>@ViewBag.Title</h2>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-inline">
                    
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.skillId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("skillId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.skillId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.photo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.photo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.photo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*@using CloudinaryDotNet;
                        <div class="form-group">
                            <form action="" method="post" enctype="multipart/form-data">
                                <fieldset>
                                    <p>
                                        @*<label for="fileToUpload">Or Browse to File To Upload</label><br />*@
                    @*<input type="file" name="fileToUpload" />
                                        </p>
                                        <input type="submit" value="Upload" />
                                    </fieldset>
                                    <div id="displayImage">
                                        @{

                        if (IsPost)
                        {
                            try
                            {
                                WebImage image = WebImage.GetImageFromRequest();
                                if (image != null)
                                {
                                    String sImagePath = Request.PhysicalApplicationPath + "App_Data/" + Path.GetFileName(image.FileName);
                                    image.Resize(width: 320, height: 320, preserveAspectRatio: true, preventEnlarge: true);


                                    image.Save(sImagePath);

                                    // now we will add it to cloudinary
                                    Cloudinary cloudinary = new Cloudinary("cloudinary://283344254821121:INXwnv9AJtOP9PUdmR-xxVa2DTk@hfm9olpom");
                                    CloudinaryDotNet.Actions.ImageUploadParams uploadParams = new CloudinaryDotNet.Actions.ImageUploadParams()
                                    {
                                        File = new CloudinaryDotNet.Actions.FileDescription(sImagePath)
                                    };

                                    CloudinaryDotNet.Actions.ImageUploadResult uploadResult = cloudinary.Upload(uploadParams);
                                    string url = cloudinary.Api.UrlImgUp.BuildUrl(String.Format("{0}.{1}", uploadResult.PublicId, uploadResult.Format));
                                    File.Delete(sImagePath);
                                    <img src="@url" alt="User Uploaded Image" title="User Uploaded Image" />
                                    Model.photo = url;

                                }
                            }
                            catch (Exception e)
                            {
                                <p>Error @e.Message</p>
                            }
                        }
                                        }
                                    </div>
                                </form>
                            </div>*@




                    <div class="form-group">
                        @Html.LabelFor(model => model.wins, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.wins, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.wins, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.losses, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.losses, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.losses, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ties, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ties, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ties, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.streetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.streetAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.streetAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.postalCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.postalCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.postalCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.provinceId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("provinceId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.provinceId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.countryId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("countryId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.countryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.phoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.phoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.phoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.emailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.emailAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.emailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.gender, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.birthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.birthDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.birthDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.accountId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("accountId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.accountId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.locked, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.locked)
                                @Html.ValidationMessageFor(model => model.locked, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.organizationId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("organizationId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.organizationId, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

            </div>
        </div>
        <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
            <footer class="application-footer">
                <div class="container">
                    <p>Total Squash</p>
                    <div class="disclaimer">
                        <a style="color:#dfdfdf;" href="mailto:superdonesolutions@gmail.com">Contact Us</a>
                        <p>Copyright © Super Done Solutions 2015</p>
                    </div>
                </div>
            </footer>
</body>

